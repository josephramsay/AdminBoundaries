/**
build.gradle

Copyright 2014 Crown copyright (c)
Land Information New Zealand and the New Zealand Government.
All rights reserved

This program is released under the terms of the new BSD license. See the
LICENSE file for more information.
 */
 
 buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        //maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.postgresql:postgresql:9.4-1206-jdbc42"
        classpath 'com.bmuschko:gradle-cargo-plugin:2.2.3'
        //pygradle
        //classpath "gradle.plugin.com.linkedin.pygradle:pygradle-plugin:0.3.24"
        //debpackage
        //classpath 'com.netflix.nebula:gradle-ospackage-plugin:1+'

    }
}


plugins {
  //id "com.linkedin.python" version "0.3.24"
  id "com.linkedin.python-sdist" version "0.3.9"
}

ext {
    postgresqlApiVersion = '9.4-1206-jdbc42'
    postGISApiVersion = '2.2.0'
    servletApiVersion = '3.+'
    junitVersion = '4.12'
    jmockVersion = '2.8.2'
    jsoupVersion = '1.10.1'
    cargoVersion = '1.4.5'
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.bmuschko.cargo'
//apply plugin: "com.linkedin.python"
//apply plugin: "nebula.deb"

version = '0.1'
sourceCompatibility = '1.8'

def webContext = 'ab'
def warDir = 'build/libs/'
def warName = 'ab.war'
def packName = 'AdminBoundaryDownloader'
def packVersion = '0.1'

//packages up everything in src/main/webapp

task copyscripts(type: Copy) {
     //dependsOn test
     //from('scripts') {
     from('../linz-admin-boundaries-uploader/labu') {
         include '**/*.py'
         include '**/*.ini'
         include '**/*.properties'
         include '**/*.template'
     }
     into 'src/main/webapp/WEB-INF/scripts'
}

war {
    dependsOn copyscripts
    manifest {
        attributes 'Implementation-Title': 'LINZ Admin Boundaries Downloader',
            'Implementation-Version': version

    }
    archiveName = warName
}

task cargosetup {
    print "> Server ${remoteHost}\n"
    dependsOn war
	cargo {
	    containerId = 'tomcat7x'
	    port = 8080
	
	    deployable {
	        file = file(warDir+warName)
	        context = webContext
	    }
	    
	    remote {
	       protocol = "${remoteProtocol}"
	       hostname = "${remoteHost}"
	       username = "${remoteUser}"
	       password = "${remotePass}"
	    }
	}    
}

/*task flake8 (overwrite: true){
   ignore = "E3"
}*/

task redeploy {
    dependsOn cargosetup, cargoRedeployRemote
}

task deploy {
    dependsOn cargosetup, cargoDeployRemote
}

task undeploy {
    dependsOn cargosetup, cargoUndeployRemote
}

repositories {
    mavenCentral()
    pyGradlePyPi()
    ivy { url "../../ivy/repository" }
    //flatDir name:"local", dirs:"~/ivy/repository"
}

dependencies {
    //classpath "org.postgresql:postgresql:$postgresqlApiVersion"
    providedCompile "javax.servlet:servlet-api:$servletApiVersion"
    providedRuntime "org.postgresql:postgresql:$postgresqlApiVersion"
    providedRuntime "net.postgis:postgis-jdbc:$postGISApiVersion"
    testCompile "junit:junit:$junitVersion" 
    testCompile "org.jmock:jmock:$jmockVersion" 
    testCompile "org.jsoup:jsoup:$jsoupVersion"
    /*
    python "pypi:pexpect:4.2.1"
    python "pypi:psycopg2:2.6.2"
    python "pypi:GDAL:2.1.0"
    */
    test "nz.govt.linz:psycopg2:2.6.2"
    test "nz.govt.linz:pexpect:4.2.1"
    test "nz.govt.linz:gdal:2.1.0"
    test "nz.govt.linz:ptyprocess:0.5.1"
}


